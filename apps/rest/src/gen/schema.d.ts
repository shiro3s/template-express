/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/todos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Todo
         * @description Todo一覧を返却する
         */
        get: operations["FindAllTodo"];
        put?: never;
        /**
         * Create Todo
         * @description Todoを作成する
         */
        post: operations["CreateTodo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/todos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * One of Todo
         * @description IDに一致するTodoを返却する
         */
        get: operations["FindTodoById"];
        /**
         * Update Todo
         * @description IDに一致するTodoを更新する
         */
        put: operations["UpdateTodo"];
        post?: never;
        /**
         * Delete Todo
         * @description IDに一致するTodoを削除する
         */
        delete: operations["DeleteTodo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Todo: {
            /** @example 1 */
            id?: number;
            /** @example UIデザインを作成する */
            title?: string;
            /** @example false */
            done?: boolean;
            /** @example false */
            is_deleted?: boolean;
            /**
             * Format: date
             * @example 2024-02-10T16:31:56+09:00
             */
            created_at?: string;
            /**
             * Format: date
             * @example 2024-02-10T16:31:56+09:00
             */
            updated_at?: string;
        };
        TodoPostBody: {
            /** @example テストコードの作成 */
            title?: string;
            /** @example false */
            done?: boolean;
        };
        TodoUpdateBody: {
            /** @example テストコードの更新 */
            title?: string;
            /** @example true */
            done?: boolean;
            /** @example true */
            is_deleted?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    FindAllTodo: {
        parameters: {
            query?: {
                title?: string;
                done?: boolean;
                is_deleted?: boolean;
                sortKey?: string;
                order?: "asc" | "desc";
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"][];
                };
            };
        };
    };
    CreateTodo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TodoPostBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    FindTodoById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Todo ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
            /** @description Resource Not Found */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UpdateTodo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Todo ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TodoUpdateBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Todo"];
                };
            };
            /** @description Resource Not Found */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    DeleteTodo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Todo ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Resource Not Found */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
}
